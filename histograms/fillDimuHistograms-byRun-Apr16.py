#!/usr/bin/python3
#-----------------------------------------------

import subprocess, optparse
from pathlib import Path
import ROOT, math
from array import array

# potentially useful constants
ETA_MASS = 0.547862
MU_MASS = 0.105658

# define function for parsing options
def parseOptions() :
	usage = ('usage: %prog [options]\n'
			+ '%prog -h for help')
	parser = optparse.OptionParser(usage)
	# input options
	parser.add_option('-i', '--input', dest='INPUT', type='string', help='input file', default="")
	parser.add_option('-o', '--output', dest='OUTPUT', type='string', help='output file')
	parser.add_option('-n', '--njobs', dest='NJOBS', type=int, help='total njobs')
	parser.add_option('-j', '--job', dest='JOB', type=int, help='job index')
	parser.add_option('-l', dest='LIST', help='input file list', default="/afs/cern.ch/user/j/jfriesen/CMSSW_13_0_10/src/Run3DimuonAnalysisTools/Plotting/FillHistogram/muMuGammaTree_ntuples_fullRun3.txt")
	# store options and arguments as global variables
	global opt, args
	(opt, args) = parser.parse_args()

# define function for processing the external os commands
def processCmd(cmd, quite = 0) :
	status, output = subprocess.getstatusoutput(cmd)
	if (status !=0 and not quite):
		print('Error in processing command:\n 	['+cmd+']')
		print('Output:\n   ['+output+'] \n')
	return output

fills = {355862:8016,355863:8016,355870:8017,355871:8017,355872:8017,355892:8018,355912:8019,355913:8019,355921:8020,355933:8022,355942:8023,355988:8027,355989:8027,355998:8027,355999:8027,356004:8027,356005:8027,356043:8030,356071:8033,356074:8033,356075:8033,356076:8033,356077:8033,356135:8043,356309:8057,356316:8058,356322:8059,356323:8059,356371:8062,356375:8063,356378:8063,356381:8063,356383:8063,356385:8063,356386:8063,356426:8067,356428:8067,356433:8067,356434:8067,356435:8067,356446:8068,356523:8076,356531:8076,356563:8078,356568:8079,356569:8079,356570:8079,356576:8081,356578:8081,356580:8081,356582:8081,356614:8083,356615:8083,356619:8083,356810:8094,356811:8094,356812:8094,356813:8094,356814:8094,356815:8094,356824:8094,356908:8098,356919:8099,356937:8100,356946:8102,356947:8102,356948:8102,356949:8102,356951:8102,356954:8102,356955:8102,356956:8102,356968:8103,356969:8103,356970:8103,356998:8106,356999:8106,357000:8106,357001:8106,357079:8112,357080:8112,357081:8112,357101:8113,357102:8113,357104:8113,357106:8113,357112:8113,357268:8115,357271:8115,357328:8118,357329:8118,357330:8118,357331:8118,357332:8118,357333:8118,357401:8120,357406:8121,357438:8124,357440:8124,357441:8124,357442:8124,357447:8125,357472:8128,357478:8128,357479:8128,357482:8128,357538:8132,357542:8132,357550:8132,357610:8136,357611:8136,357612:8136,357613:8136,357688:8142,357696:8143,357697:8143,357698:8143,357699:8143,357700:8143,357701:8143,357705:8143,357706:8143,357720:8144,357732:8146,357734:8146,357735:8146,357754:8147,357756:8147,357757:8147,357758:8147,357759:8147,357766:8148,357777:8148,357778:8148,357779:8148,357781:8148,357802:8149,357803:8149,357804:8149,357805:8149,357806:8149,357807:8149,357808:8149,357809:8149,357812:8149,357813:8149,357814:8149,357815:8149,357898:8151,357899:8151,357900:8151,359569:8210,359571:8210,359575:8210,359595:8211,359597:8211,359602:8212,359609:8212,359612:8212,359661:8214,359685:8216,359686:8216,359691:8220,359693:8220,359694:8220,359699:8221,359718:8222,359750:8223,359751:8223,359762:8225,359763:8225,359764:8225,359776:8226,359806:8228,359808:8228,359809:8228,359810:8228,359812:8228,359814:8228,359870:8230,359871:8230,359887:8232,359899:8233,359903:8233,359998:8236,360017:8238,360019:8238,360075:8245,360090:8245,360116:8247,360125:8247,360126:8247,360127:8247,360128:8247,360130:8247,360131:8247,360141:8248,360224:8253,360225:8253,360295:8260,360296:8260,360327:8263,360390:8267,360391:8267,360392:8267,360393:8267,360400:8269,360413:8272,360428:8273,360432:8273,360435:8273,360437:8273,360438:8273,360458:8274,360459:8274,360460:8274,360486:8276,360490:8276,360491:8276,360737:8289,360761:8293,360794:8295,360795:8295,360797:8295,360820:8297,360825:8297,360826:8297,360856:8299,360874:8301,360876:8301,360887:8302,360888:8302,360889:8302,360890:8302,360892:8302,360895:8302,360919:8304,360920:8304,360921:8304,360927:8305,360941:8306,360942:8306,360945:8306,360946:8306,360948:8306,360950:8306,360951:8306,360991:8307,360992:8307,361020:8309,361044:8311,361045:8311,361050:8311,361052:8311,361054:8311,361083:8312,361091:8313,361105:8314,361106:8314,361107:8314,361108:8314,361110:8314,361188:8315,361193:8315,361195:8315,361197:8315,361223:8316,361239:8317,361240:8317,361272:8319,361280:8319,361283:8319,361284:8319,361297:8320,361303:8321,361318:8322,361319:8322,361320:8322,361333:8324,361361:8327,361362:8327,361363:8327,361365:8327,361366:8327,361400:8330,361417:8331,361443:8333,361468:8334,361475:8335,361512:8342,361569:8345,361573:8345,361579:8347,361580:8347,361957:8385,361971:8387,361989:8389,361990:8389,361994:8389,362058:8395,362059:8395,362060:8395,362061:8395,362062:8395,362063:8395,362064:8395,362087:8398,362091:8398,362104:8399,362105:8399,362106:8399,362107:8399,362148:8401,362153:8401,362154:8401,362159:8402,362161:8402,362163:8402,362166:8402,362167:8402,359569:8210,359571:8210,359575:8210,359595:8211,359597:8211,359602:8212,359609:8212,359612:8212,359661:8214,359685:8216,359686:8216,359691:8220,359693:8220,359694:8220,359699:8221,359718:8222,359750:8223,359751:8223,359762:8225,359763:8225,359764:8225,359776:8226,359806:8228,359808:8228,359809:8228,359810:8228,359812:8228,359814:8228,359870:8230,359871:8230,359887:8232,359899:8233,359903:8233,359998:8236,360017:8238,360019:8238,360075:8245,360090:8245,360116:8247,360125:8247,360126:8247,360127:8247,360128:8247,360130:8247,360131:8247,360141:8248,360224:8253,360225:8253,360295:8260,360296:8260,360327:8263,362437:8456,362439:8456,362597:8471,362614:8474,362615:8474,362616:8474,362617:8474,362618:8474,362653:8484,362654:8484,362655:8484,362657:8484,362695:8489,362696:8489,362698:8489,362720:8491,362727:8491,362728:8491,362757:8496,362758:8496,362760:8496,366727:8675,366729:8675,366801:8685,366802:8685,366804:8685,366820:8686,366821:8686,366829:8690,366832:8690,366833:8690,366838:8691,366840:8691,366841:8691,366850:8692,366933:8701,367062:8723,367063:8723,367064:8723,367065:8723,367070:8724,367079:8725,367095:8728,367100:8729,367102:8729,367103:8729,367104:8729,367111:8730,367112:8730,367127:8731,367128:8731,367129:8731,367130:8731,367131:8731,367133:8731,367228:8736,367229:8736,367230:8736,367231:8736,367232:8736,367234:8736,367260:8738,367262:8738,367263:8738,367264:8738,367267:8739,367269:8739,367270:8739,367271:8739,367312:8741,367314:8741,367315:8741,367334:8746,367336:8746,367337:8746,367355:8750,367406:8754,367413:8754,367415:8754,367416:8754,367475:8771,367477:8771,367515:8773,367516:8773,367552:8775,367553:8775,367554:8775,367615:8782,367618:8782,367619:8782,367661:8784,367662:8784,367663:8784,367665:8784,367666:8784,367691:8786,367696:8786,367699:8786,367730:8794,367742:8796,367758:8804,367770:8807,367771:8807,367772:8807,367790:8811,367831:8816,367836:8817,367838:8817,367840:8817,367881:8821,367883:8821,367884:8821,367902:8822,367904:8822,367905:8822,367906:8822,367907:8822,367908:8822,367910:8822,368223:8850,368224:8850,368229:8853,368318:8858,368320:8858,368321:8858,368332:8860,368333:8860,368343:8860,368382:8863,368384:8863,368388:8865,368389:8865,368400:8866,368410:8870,368412:8870,368423:8872,368451:8873,368453:8873,368454:8873,368489:8877,368546:8880,368547:8880,368548:8880,368566:8882,368567:8882,368609:8885,368611:8885,368613:8885,368636:8887,368669:8891,368670:8891,368672:8891,368674:8891,368675:8891,368676:8891,368678:8891,368684:8894,368685:8894,368723:8895,368724:8895,368746:8896,368749:8896,368753:8896,368762:8896,368764:8896,368765:8896,368822:8901,368823:8901,369927:9016,369943:9017,369956:9019,369978:9022,369998:9023,369999:9023,370093:9029,370097:9029,370102:9029,370129:9031,370144:9031,370169:9035,370172:9035,370175:9036,370293:9043,370294:9043,370300:9044,370304:9044,370307:9044,370321:9045,370332:9045,370340:9046,370354:9049,370357:9049,370406:9050,370436:9050,370460:9055,370472:9056,370497:9057,370522:9059,370560:9062,370579:9063,370580:9063,370667:9066,370717:9067,370725:9068,370749:9070,370753:9070,370772:9072,370774:9072,370775:9072,370776:9072,370790:9073}
pt_bins = ( 3.05, 4.20, 4.20, 4.41, 4.41, 4.62, 4.62, 4.82, 4.82, 5.03, 5.03, 5.24, 5.24, 5.47, 5.47, 5.71, 5.71, 5.99, 5.99, 6.29, 6.29, 6.62, 6.62, 6.99, 6.99, 7.43, 7.43, 7.94, 7.94, 8.57, 8.57, 9.40, 9.40, 10.53, 10.53, 12.28, 12.28, 15.72, 15.72, 213.18 )

# define function for job
def fillHistograms() :

	verbose = False
	ROOT.gROOT.SetBatch()

	global opt, args
	parseOptions()

	# get input files from list (parsed option)
	print( "Opening list of input files", opt.LIST )
	file_list = Path(opt.LIST).read_text().splitlines()
	print( "	Found", len(file_list), "items in list")

	njobs_actual = min( opt.NJOBS, len(file_list) )
	file_range = (
		int( ( (float(opt.JOB)-1) * len(file_list) ) / njobs_actual ),
		int( ( (float(opt.JOB)) * len(file_list) ) / njobs_actual )
	)
	
	print( "	Job", opt.JOB, "of", opt.NJOBS, "using file range", file_range )

	redirector = "root://cmsxrootd.fnal.gov//"
	print( "	Using redirector", redirector )

	itree_name = "tree/tree"
	itree = ROOT.TChain(itree_name)
	for i in range(file_range[0], file_range[1]) :
		print("Getting", itree_name, "from", redirector+file_list[i])
		itree.Add(redirector+file_list[i])
		print(itree.GetEntries(), "total entries in TChain")

	print("Creating "+str(opt.OUTPUT)+str(opt.JOB)+".root")
	outfile = ROOT.TFile(str(opt.OUTPUT)+str(opt.JOB)+".root", "recreate")

	# define histogram binning
	bin_width = 0.0001 # GeV
	mumu_mass_range = ( round(0./bin_width) * bin_width, round(1.4/bin_width) * bin_width )
	mumu_mass_bins = round( (mumu_mass_range[1] - mumu_mass_range[0])/bin_width )

	histos = {}

	print("Processing events...")
	i_event = 0
	#fill = 0
	for ev in itree :
		if (ev.mass > mumu_mass_range[1]) : continue
		if(verbose or i_event%1000==0): print( "mumu_mass <", mumu_mass_range[1], "event", i_event )
		i_event+=1

		if not ev.runNum in histos:
			histos[ev.runNum] = {}

		leading_pt = max(ev.pt1, ev.pt2)

		pt_key = -1
		for ipt in range(len(pt_bins)) :
			if ipt == len(pt_bins)-1 : print("i_event", i_event, "pt", leading_pt, "too high")
			elif leading_pt > pt_bins[ipt] and leading_pt < pt_bins[ipt+1] :
				pt_key = "pt" + str(pt_bins[pt]).replace(".","p") + "to" + str(pt_bins[pt+1]).replace(".","p")
				break

		if pt_key not in histos[ev.runNum] :
			histos[ev.runNum][pt_key] = {}

		if abs(ev.eta1) < 1.479 and abs(ev.eta2) < 1.479 :
			if "bb" not in histos[ev.runNum][pt_key] : 
				histos[ev.runNum][pt_key]["bb"] = ROOT.TH1F("mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_bb","mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_bb",mumu_mass_bins,mumu_mass_range[0],mumu_mass_range[1])
			histos[ev.runNum][pt_key]["bb"].Fill(ev.mass)
		elif abs(ev.eta1) > 1.479 and abs(ev.eta2) > 1.479 :
			if "ee" not in histos[ev.runNum][pt_key] : 
				histos[ev.runNum][pt_key]["ee"] = ROOT.TH1F("mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_ee","mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_ee",mumu_mass_bins,mumu_mass_range[0],mumu_mass_range[1])
			histos[ev.runNum][pt_key]["ee"].Fill(ev.mass)
		else :
			if "eb" not in histos[ev.runNum][pt_key] : 
				histos[ev.runNum][pt_key]["bb"] = ROOT.TH1F("mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_eb","mass_mumu_run"+str(ev.runNum)+"_"+pt_key+"_eb",mumu_mass_bins,mumu_mass_range[0],mumu_mass_range[1])
			histos[ev.runNum][pt_key]["eb"].Fill(ev.mass)
		#print( ev.mass, ev.runNum, fill, i_event, histos[fill].GetEntries() )

	for run in histos :
		for pt_key in histos[run] :
			for s in histos[run][pt_key] :
				histo = histos[run][pt_key][s]
				name = histo.GetName()
				print( "Saving", name, "to", str(opt.OUTPUT)+str(opt.JOB)+".root", "with", histo.GetEntries(), "entries" )
				if histo.GetEntries() > 0 : outfile.WriteObject( histo, name )

	outfile.Close()

if __name__ == "__main__":
	fillHistograms()
